name: CI Cross-Platform Build

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            build/_deps
            ~/.cache/ccache
          key: ${{ runner.os }}-deps-${{ hashFiles('cmake/dependencies.cmake', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libx11-dev \
            libgl1-mesa-dev \
            libudev-dev \
            libopenal-dev \
            libvorbis-dev \
            libflac-dev \
            libfreetype-dev \
            xorg-dev \
            libogg-dev

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=23 -DCMAKE_SYSTEM_PROCESSOR=x86_64

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Prepare Runtime Dependencies
        run: |
          cd build
          mkdir -p runtime
          cp sfml_game runtime/
          cp _deps/sfml-build/lib/*.so* runtime/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: build/runtime

  test-linux:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libopenal1 libvorbis0a libvorbisfile3 libflac8 libfreetype6

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-build
          path: build/runtime

      - name: Make Executable
        run: |
          ls -la build/runtime
          chmod +x build/runtime/sfml_game

      - name: Run Tests with Virtual Display
        run: |
          cd build/runtime
          LD_LIBRARY_PATH=. xvfb-run --auto-servernum ./sfml_game --test-mode

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            build\_deps
            ~\AppData\Local\ccache
          key: ${{ runner.os }}-deps-${{ hashFiles('cmake/dependencies.cmake', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Ninja
        run: |
          choco install ninja -y

      - name: Setup Visual Studio Environment
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '17.0'

      - name: Install Visual Studio Components
        run: |
          choco install visualstudio2022-workload-nativedesktop -y --package-parameters "--includeOptional"

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.25.0"

      - name: Install OpenAL
        run: |
          choco install openal -y

      - name: Configure CMake
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=23 -DSFML_STATIC_LIBRARIES=TRUE -DBUILD_SHARED_LIBS=FALSE

      - name: Build
        shell: cmd
        run: |
          cd build
          ninja

      - name: Prepare Runtime Dependencies
        shell: cmd
        run: |
          cd build
          mkdir runtime
          copy sfml_game.exe runtime\
          copy _deps\sfml-build\lib\*.dll runtime\
          copy _deps\sfml-src\extlibs\bin\x64\*.dll runtime\

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: build/runtime

  test-windows:
    needs: build-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install OpenAL
        run: choco install openal -y

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build
          path: build/runtime

      - name: Setup Virtual Display
        shell: powershell
        run: |
          # Use dummy display for headless operation
          $env:DISPLAY=":0"
          # Install virtual display driver
          choco install winvnc -y

      - name: Run Tests
        shell: cmd
        run: |
          cd build\runtime
          set DISPLAY=:0
          .\sfml_game.exe --test-mode
