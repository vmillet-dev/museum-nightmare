name: CI Cross-Platform Build

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            build/_deps
            ~/.cache/ccache
          key: ${{ runner.os }}-deps-${{ hashFiles('cmake/dependencies.cmake') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libx11-dev \
            libgl1-mesa-dev \
            libudev-dev \
            libopenal-dev \
            libvorbis-dev \
            libflac-dev \
            libfreetype-dev \
            xorg-dev \
            libogg-dev \
            xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build
        run: |
          cd build
          make -j$(nproc)

  build-and-test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            build\_deps
            ~\AppData\Local\ccache
          key: ${{ runner.os }}-deps-${{ hashFiles('cmake/dependencies.cmake') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Ninja
        run: |
          choco install ninja -y

      - name: Setup Visual Studio Environment
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '17.0'

      - name: Install Visual Studio Components
        run: |
          choco install visualstudio2022-workload-nativedesktop -y --package-parameters "--includeOptional"

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.25.0"

      - name: Install OpenAL
        run: |
          choco install openal -y

      - name: Configure Display
        shell: cmd
        run: |
          echo "Setting up display environment..."
          set DISPLAY=:0
          echo "DISPLAY=:0" >> %GITHUB_ENV%

      - name: Configure CMake
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja"

      - name: Build
        shell: cmd
        run: |
          cd build
          ninja

      - name: Copy DLLs
        shell: cmd
        run: |
          cd build
          copy _deps\tmxlite-build\libtmxlite-d.dll .
          copy _deps\sfml-build\lib\sfml-audio-d-2.dll .
          copy _deps\sfml-build\lib\sfml-network-d-2.dll .
          copy _deps\sfml-build\lib\sfml-graphics-d-2.dll .
          copy _deps\sfml-build\lib\sfml-system-d-2.dll .
          copy _deps\sfml-build\lib\sfml-window-d-2.dll .
          copy _deps\spdlog-build\*.dll .
          copy _deps\box2d-build\src\*.dll .
          copy "C:\Program Files\OpenAL\libs\Win64\OpenAL32.dll" .
          dir
